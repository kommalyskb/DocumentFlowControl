<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AUTH_FAILED" xml:space="preserve">
    <value>Authorized has been failured please try again</value>
  </data>
  <data name="BUCKET_CREATED" xml:space="preserve">
    <value>Bucket Created</value>
  </data>
  <data name="BUCKET_EMPTY" xml:space="preserve">
    <value>Bucket name could not empty</value>
  </data>
  <data name="BUCKET_EXIST" xml:space="preserve">
    <value>This bucket is already exist</value>
  </data>
  <data name="BUCKET_NOT_EXIST" xml:space="preserve">
    <value>Bucket could not found</value>
  </data>
  <data name="CONTENT_EMPTY" xml:space="preserve">
    <value>File content could not empty</value>
  </data>
  <data name="CONTENT_IS_EMPTY" xml:space="preserve">
    <value>Content is empty</value>
  </data>
  <data name="COULD_NOT_CREATE_RECORD" xml:space="preserve">
    <value>Could not create record</value>
  </data>
  <data name="DUPPLICATE_ROLE" xml:space="preserve">
    <value>Role could not dupplicate</value>
  </data>
  <data name="EMPTY_ID" xml:space="preserve">
    <value>The ID should not empty</value>
  </data>
  <data name="FILENAME_EMPTY" xml:space="preserve">
    <value>File name could not empty</value>
  </data>
  <data name="GRANT_INVALID" xml:space="preserve">
    <value>Invalid grant_type</value>
  </data>
  <data name="INVALID_LINK" xml:space="preserve">
    <value>Could not list document, invalid link</value>
  </data>
  <data name="INVALID_SIGNATURE" xml:space="preserve">
    <value>Invalid signature from client, please verify signature before call API</value>
  </data>
  <data name="INVALID_USER" xml:space="preserve">
    <value>UserID could not found from access token</value>
  </data>
  <data name="NEW_DOCUMENT" xml:space="preserve">
    <value>New document created</value>
  </data>
  <data name="NOT_FOUND" xml:space="preserve">
    <value>Your data inquiry not found</value>
  </data>
  <data name="NO_CERT_FOUND" xml:space="preserve">
    <value>No certificate found</value>
  </data>
  <data name="NO_PERMITTED" xml:space="preserve">
    <value>Client has no permit to access to API</value>
  </data>
  <data name="OBJECT_REMOVED" xml:space="preserve">
    <value>Object Removed</value>
  </data>
  <data name="OBJECT_UPLOADED" xml:space="preserve">
    <value>Object Uploaded</value>
  </data>
  <data name="PARAMETER_EMPTY" xml:space="preserve">
    <value>Request failed parameter is empty</value>
  </data>
  <data name="REG_USER_FAIL" xml:space="preserve">
    <value>Failed to register new user on Identity Server</value>
  </data>
  <data name="REQUEST_FAIL" xml:space="preserve">
    <value>Request failed</value>
  </data>
  <data name="REQUEST_TOKEN_ERROR" xml:space="preserve">
    <value>Could not request token</value>
  </data>
  <data name="SUCCESS_OPERATION" xml:space="preserve">
    <value>Success</value>
  </data>
  <data name="TX_NOT_FOUND" xml:space="preserve">
    <value>Transaction ID not found </value>
  </data>
  <data name="USERID_EMPTY" xml:space="preserve">
    <value>UserID could not empty</value>
  </data>
  <data name="USERNAME_COULD_NOT_EMPTY" xml:space="preserve">
    <value>Username could not empty</value>
  </data>
  <data name="USERNAME_NOT_FOUND" xml:space="preserve">
    <value>Username not found</value>
  </data>
</root>